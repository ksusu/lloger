#!/usr/bin/env node

//Arguments List
var http = require('http');
var fs = require('fs');
var process = require('process');
const { URL } = require('url');

var COMMAND = process.argv[2]
var COM_ARGS = process.argv.slice(3);
var hosturl = new URL('http://127.0.0.1:8080');
var cpath = "/";
var userID = "";
var userPW = "";

var save_path = 'lloger.txt'

/* This is for checking whether lloger command used or not. But not working at all.
if(process.argv[2] != 'lloger') {
	console.log(process.argv[1]); -> process.argv[1] is a path of index.js in npm.
	console.error('Wrong accessment 01 (Not excuted by \'lloger\' command)');
}
*/

/***********************************************************************************/
// Program section
var options = {
	hostname: hosturl.hostname,
	port: hosturl.port,
	path: cpath,
	method: 'POST'
}

//requesting phase
check_Command()

var req = http.request(classify_Command());

req.on('error', function(e) {
	console.error("problem with request:" + e.message);
})

//End phase
req.end();


/*
var MyRequst = function(COMMAND,COM_ARGS){
	if(COMMAND == 'register')
}
*/

/***********************************************************************************/

// Arguments tests
function check_Command(){
	process.argv.forEach((item, index) =>{ 
		console.log(index + ' : ' + typeof(item) + ' : ' + item);
	});
	console.log('COMMAND : '  + COMMAND);
	console.log('COM_ARGS : ' + COM_ARGS);
}

// functions that control .lloger file
// 1) UDS : user data save 2) UDL : user data load
function UDS (userID, userPW) {
	var data = '?NAME=' + userID + '\n'
			 + '?PASSWORD=' + userPW;
	if (fs.existsSync(save_path)) {
		console.error(save_path + ' does exist. (UDS)');
		return false;
	} else {
		fs.writeFileSync(save_path,data);
		console.log('The UD has been saved : ' + '\n' + data);
		return true;
	}
}

function UDL () {
	var data = "";
	/*
	try{
		fs.readFile(save_path,data)
		console.log('The UD has been loaded');
		console.log(data);
	} catch(error) { //FIXME
		console.log(error);
	}*/
	if (!fs.existsSync(save_path)) {
		console.error(save_path + ' does not exist. (UDL)');
		return false;
	}
	data = fs.readFileSync(save_path, 'utf-8');
	console.log(data);

	data = data.split('\n');
	console.log("apple");
	console.log(data);
	userID = data[0].substring(6);
	userPW = data[1].substring(9);
	//FIXME : delete lloger.txt
	return true;
}

//COMMAND Argumnet classify
function classify_Command () {
	if (COMMAND == 'register') {
		cpath = cpath + '?COMMAND=register'
					  + '?NAME=' + COM_ARGS[0]
					  + '?PASSWORD=' + COM_ARGS[1];
		console.log('cpath is' + cpath);
		//FIXME : Crypto should be implemented
		if(!UDS (COM_ARGS[0],COM_ARGS[1])) {
			console.log('Exist - register, file already exist');
			return options; //Blank option
		} else {
			console.log('Success.')
		}
	} else if (COMMAND == 'deregister') {
		UDL();
		cpath = cpath + '?COMMAND=deregister'
					  + '?NAME=' + userID
					  + '?PASSWORD' + userPW;
		console.log('cpath is' + cpath);

	} else if (COMMAND == 'i' || COMMAND == 'I') {
		UDL();
		var ACTION = ""
		COM_ARGS.forEach((item) => {
			ACTION = ACTION + item +'_';
			console.log(ACTION);
		})
		console.log(ACTION);
		cpath = cpath + '?COMMAND=i'
					  + '?NAME=' + userID
					  + '?PASSWORD=' + userPW
					  + '?ACTION=' + ACTION;
		console.log('cpath is' + cpath);
	} else if (COMMAND == 'average') {

	} else if (COMMAND == 'aggregate') {

	}
	return options = {
		hostname: hosturl.hostname,
		port: hosturl.port,
		path: cpath,
		method: 'POST'
	}	
}

function command_i() {
  return { path: ..., body: }
}

function command_average() {
  return ,...
}

function request_command(callback) {
  // initialize connection
  ...
  
  // do some other things
  
  var data = callback()
  var send_data =  ... // using data
  
  http.request (data)
  
  // do finishing
}

function clasify_comamnd() {
  var func = nil
  case command of
  	'i' -> func = command_i
  	'average' -> funct = command_average
  ...
}


cpath = cpath + '?COMMAND=register'
              + '?NAME=' + COM_ARGS[0]
              + '?PASSWORD=' + COM_ARGS[1];
  
name = jack
pass = p@ss
  
http://llogger.com/?COMMAND=register?NAME=jack?PASSWORD=p@ss
  
name = jack%?COMMAND=deregister
pass = p@ss

http://llogger.com/?COMMAND=register&NAME=jack&COMMAND=deregister&PASSWORD=p@ss  

